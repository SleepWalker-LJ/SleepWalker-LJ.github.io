<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>模块化加载过程</title>
    <url>/2021/09/14/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="3-模块加载过程"><a href="#3-模块加载过程" class="headerlink" title="3. 模块加载过程"></a>3. 模块加载过程</h4><ul>
<li>特点：require的文件，内部所有代码都会执行一遍</li>
<li>cjs<ul>
<li>特点：<ol>
<li>是同步的，require的文件内容执行完才会执行下一行代码。</li>
<li>模块被多次引入时，会缓存，最终只加载一次。<ul>
<li>每个模块对象module都有一个属性：loaded</li>
<li>false表示还没加载，true表示已加载</li>
<li><img src="https://i.loli.net/2021/09/14/gfF715SR3TxC689.png" alt="image-20210914144231212"></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>开发总结</title>
    <url>/2021/09/16/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一，移动端"><a href="#一，移动端" class="headerlink" title="一，移动端"></a>一，移动端</h2><h4 id="开发经验"><a href="#开发经验" class="headerlink" title="开发经验"></a>开发经验</h4><ol>
<li>开始时进行分包</li>
<li>下拉刷新：如果是整个页面的刷新是写在外面的</li>
<li>样式的话，先写的差不多，再去调，不要写一下调一下，浪费时间</li>
<li>有些样式不好调的时候，可以直接在调试工具找到对应的元素或上级元素，直接写样式代码来调整。</li>
</ol>
<h4 id="样式布局"><a href="#样式布局" class="headerlink" title="样式布局"></a>样式布局</h4><ol>
<li>一般不写高度，通过padding来撑开元素</li>
<li>可以通过隐藏元素的方式来占位，实现特殊的布局</li>
<li>灵活使用flex布局的伸缩属性</li>
<li>使用scroll时，注意图片的高度，容易出现高度计算不够的问题</li>
<li>使用v-for的margin-bottom（多余一个边距），可以用last-child来取消最后一个margin-bottom</li>
</ol>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol>
<li>加入骨架屏</li>
<li>图片的预加载和懒加载</li>
<li>微信开发者工具可以给自己的小程序打分，这样就可以针对性的进行优化</li>
<li>小程序首屏加载优化</li>
<li>小程序优化<a href="https://zhuanlan.zhihu.com/p/135983160">https://zhuanlan.zhihu.com/p/135983160</a></li>
</ol>
<h4 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h4><ol>
<li>图片尽量加上高度，避免图片加载时突然宽高变化的问题</li>
<li>配置esaycom，组件引入就很方便了</li>
<li>利用微信开发者工具的mock来测试数据</li>
<li>uniapp中的url不需要加@</li>
</ol>
<h2 id="二，-整体项目"><a href="#二，-整体项目" class="headerlink" title="二， 整体项目"></a>二， 整体项目</h2><h4 id="HACK"><a href="#HACK" class="headerlink" title="HACK"></a>HACK</h4><ol>
<li>通过清空数据实现隐藏</li>
</ol>
<h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><ol>
<li><p>回调层次过深时，使用promise来减少回调</p>
</li>
<li><p>给对象添加属性，如果只是调用就不需要拷贝</p>
<ul>
<li><pre><code class="JavaScript">this.listOne=res.map(it=&gt;&#123;
    Object.assign(it,&#123;
        isShow:false
    &#125;)
    return it
&#125;)
</code></pre>
</li>
</ul>
</li>
</ol>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><ol>
<li>考虑后期的可维护性，页面尽量不封装，一旦后期加新的页面，就需要不断加入逻辑，容易出现冲突，封装组件即可。</li>
<li>目录设计：<ul>
<li>common：mixins混入    filters全局过滤器    config配置环境变量    datamap数据映射</li>
</ul>
</li>
</ol>
<h2 id="三，开发注意"><a href="#三，开发注意" class="headerlink" title="三，开发注意"></a>三，开发注意</h2><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><ol>
<li>插槽上写样式没用，替换了就没了</li>
<li>引用组件，最后包裹起来使用，好写样式</li>
<li>写组件的时候，注意传值时单向的，所以该数据去做响应的时候，要么传回去改，要么赋值到data中</li>
</ol>
<h4 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h4><ol>
<li>如果前面代码报错，后面不会继续执行</li>
<li>记得及时清除缓存，选择network里的清除缓存，就看不到from disk了</li>
</ol>
<h2 id="四，好的方法"><a href="#四，好的方法" class="headerlink" title="四，好的方法"></a>四，好的方法</h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol>
<li>写复杂的逻辑时，试着多记录，画图，写注释，记录自己的思路，不然脑子不够用，这个方法非常有用</li>
<li>优先完成主体功能</li>
</ol>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul>
<li>webstorm:<ol>
<li>ctrl+alt+方向键：去上一个或下一个光标的位置</li>
</ol>
</li>
<li>hbuilderx:<ol>
<li>alt+方向键：去上一个或下一个光标的位置</li>
</ol>
</li>
<li>windows：<ul>
<li> 剪贴板是win+v</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>notice</tag>
      </tags>
  </entry>
  <entry>
    <title>ES Module</title>
    <url>/2021/09/16/ES-Module/</url>
    <content><![CDATA[<h4 id="一，区别于commonJS"><a href="#一，区别于commonJS" class="headerlink" title="一，区别于commonJS"></a>一，区别于commonJS</h4><ul>
<li>import和export是关键字</li>
<li>采用编译器的静态分析，并且也加入了动态引用的方式（在代码解析阶段执行，所以不能写到逻辑代码中。逻辑代码是个执行过程）</li>
</ul>
<h4 id="二，语法"><a href="#二，语法" class="headerlink" title="二，语法"></a>二，语法</h4><p><strong>–导出–</strong></p>
<p>​        导出的是变量的引用，就是地址，所以改动了值，导出的内容也会改变。</p>
<p><img src="https://i.loli.net/2021/09/16/rkzM3xEtCj1KaY9.png" alt="image-20210916192559447"></p>
<h6 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name=<span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sayHello=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方式二：-中统一导出"><a href="#方式二：-中统一导出" class="headerlink" title="方式二：{} 中统一导出"></a>方式二：{} 中统一导出</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;放置要导出的变量的引用列表&#125;</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">	name,</span><br><span class="line">    sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方式三：-导出时，可以给变量起别名"><a href="#方式三：-导出时，可以给变量起别名" class="headerlink" title="方式三：{} 导出时，可以给变量起别名"></a>方式三：{} 导出时，可以给变量起别名</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">	name <span class="keyword">as</span> FName,</span><br><span class="line">    sayHello <span class="keyword">as</span> FSayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>–导入–</strong></p>
<h6 id="方式一：-1"><a href="#方式一：-1" class="headerlink" title="方式一："></a>方式一：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的&#123;&#125;不是对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,sayHello&#125; <span class="keyword">from</span> <span class="string">&#x27;./xx/xx.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="方式二：-导出变量之后可以起别名"><a href="#方式二：-导出变量之后可以起别名" class="headerlink" title="方式二：{} 导出变量之后可以起别名"></a>方式二：{} 导出变量之后可以起别名</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的&#123;&#125;不是对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> oName,sayHello <span class="keyword">as</span> oSayHello&#125; <span class="keyword">from</span> <span class="string">&#x27;./xx/xx.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="方式三：-as-foo"><a href="#方式三：-as-foo" class="headerlink" title="方式三：*  as foo"></a>方式三：*  as foo</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放入一个对象中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./xx/xx.js&#x27;</span></span><br><span class="line">foo.name</span><br></pre></td></tr></table></figure>

<p> <strong>–default–</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    方法（）</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> 自定义名字 <span class="keyword">from</span> <span class="string">&quot;./x&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意：一个模块只有一个default</p>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
</search>
